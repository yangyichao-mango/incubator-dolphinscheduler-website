{
  "filename": "development-environment-setup.md",
  "__html": "<h4>准备工作</h4>\n<ol>\n<li>\n<p>首先从远端仓库fork <a href=\"https://github.com/apache/incubator-dolphinscheduler\">dolphinscheduler</a> 一份代码到自己的仓库中</p>\n</li>\n<li>\n<p>安装好MySQL/PostgreSQL,Zookeeper,Nginx,Hadoop(可选)</p>\n</li>\n<li>\n<p>把自己仓库clone到本地</p>\n<p><code>git clone https://github.com/apache/incubator-dolphinscheduler.git</code></p>\n</li>\n<li>\n<p>git clone项目后，进入目录，执行以下命令。</p>\n</li>\n</ol>\n<pre><code>1. git branch -a    #查看分支\n2. git checkout dev #切换到dev分支\n3. git pull #同步分支\n4. mvn -U clean package -Prelease -Dmaven.test.skip=true   #由于项目使用了gRPC，所以需要先编译项目生成需要的类。\n</code></pre>\n<h4>搭建后端</h4>\n<ol>\n<li>\n<p>创建ds数据库CREATE DATABASE dolphinscheduler。</p>\n</li>\n<li>\n<p>创建表和初始化数据：\n修改dao模块resource目录下application.properties文件中的数据库配置信息，如果你使用MySQL作为数据库，那么还需要配置pom.xml中mysql-connector-java依赖的scope为compile，然后执行org.apache.dolphinscheduler.dao.upgrade.shell.CreateDolphinScheduler的类，运行完，刷新数据库，表和数据都有了。</p>\n</li>\n<li>\n<p>启动MasterServer\norg.apache.dolphinscheduler.server.master.MasterServer类main函数增加如下代码：</p>\n<pre><code>System.setProperty(&quot;spring.profiles.active&quot;,&quot;master&quot;);\n</code></pre>\n<p>修改server模块resources目录下master_logback.xml文件，增加以下代码：</p>\n<pre><code>&lt;root level=&quot;INFO&quot;&gt;\n &lt;appender-ref ref=&quot;MASTERLOGFILE&quot;/&gt;\n &lt;!-- 增加日志到控制台--&gt;\n &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;\n&lt;/root&gt;\n</code></pre>\n<p>修改common模块，quartz.properties中数据库配置信息，zookeeper.properties中链接信息(zookeeper.quorum), 然后执行MasterServer即可。</p>\n</li>\n<li>\n<p>启动WorkerServer\norg.apache.dolphinscheduler.server.worker.WorkerServer类main函数增加如下代码：</p>\n<pre><code>System.setProperty(&quot;spring.profiles.active&quot;,&quot;worker&quot;);\n</code></pre>\n<p>修改server模块resources目录下worker_logback.xml文件，增加以下代码：</p>\n<pre><code>&lt;root level=&quot;INFO&quot;&gt;\n &lt;appender-ref ref=&quot;TASKLOGFILE&quot;/&gt;\n &lt;appender-ref ref=&quot;WORKERLOGFILE&quot;/&gt;\n &lt;!-- 增加日志到控制台--&gt;\n &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;\n&lt;/root&gt;\n</code></pre>\n<p>然后执行MasterServer即可。</p>\n</li>\n</ol>\n<h4>搭建前端</h4>\n<p>进入dolphinscheduler-ui的目录，执行ui项目的编译，由于是webpack和vue，所以需要以下命令：</p>\n<pre><code>1. npm install    #没有npm的，mac用brew安装。brew install npm。\n2. npm run build  #执行完build命令后，会生成dist文件夹，这个文件夹一定要和nginx配置文件的40行所指的目录相同。\n</code></pre>\n<p>保存以下内容到dolphinscheduler.conf文件：</p>\n<pre><code>\n#user  nobody;\nworker_processes  1;\n\nerror_log  /usr/local/etc/nginx/logs/error.log;\nerror_log  /usr/local/etc/nginx/logs/error.log  notice;\nerror_log  /usr/local/etc/nginx/logs/error.log  info;\n\npid        /usr/local/etc/nginx/logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '\n    #                  '$status $body_bytes_sent &quot;$http_referer&quot; '\n    #                  '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';\n\n    access_log  /usr/local/etc/nginx/logs/access.log;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n    server {\n        listen       8888;# access port\n        server_name  localhost;\n        #charset koi8-r;\n        access_log  /usr/local/etc/nginx/logs/host.access.log;\n        location / {\n            root   /xxx/xxx/incubator-dolphinscheduler/dolphinscheduler-ui/dist; #这里为ui目录，需要修改\n            index  index.html index.html;\n        }\n        location /dolphinscheduler {\n            proxy_pass http://localhost:12345; # interface address\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header x_real_ipP $remote_addr;\n            proxy_set_header remote_addr $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_http_version 1.1;\n            proxy_connect_timeout 300s;\n            proxy_read_timeout 300s;\n            proxy_send_timeout 300s;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection upgrade;\n        }\n        #error_page  404              /404.html;\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   /usr/share/nginx/html;\n        }\n    }\n    include servers/*;\n}\n\n</code></pre>\n<p>修改上面root指向，然后将文件放到nginx配置同级目录,使用以下命令，启动nginx。</p>\n<pre><code>./nginx -c dolphinscheduler.conf\n</code></pre>\n<p>启动ApiApplicationServer类：\norg.apache.dolphinscheduler.api.ApiApplicationServer类main函数增加如下代码：</p>\n<pre><code>System.setProperty(&quot;spring.profiles.active&quot;, &quot;api&quot;);\n</code></pre>\n<p>修改api模块resources目录下apiserver_logback.xml文件，增加以下代码：</p>\n<pre><code>&lt;root level=&quot;INFO&quot;&gt;\n &lt;appender-ref ref=&quot;APISERVERLOGFILE&quot; /&gt;\n &lt;!-- 增加日志到控制台--&gt;\n &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;\n&lt;/root&gt;\n</code></pre>\n<pre><code>执行ApiApplicationServer, 然后访问localhost:8888，账号admin/dolphinscheduler123。\n</code></pre>\n<h4>资源中心</h4>\n<p>ds对于资源的存储在本地文件系统/HDFS/S3/minio中，HDFS的mac安装请参考:<a href=\"https://www.jianshu.com/p/935b4c5e4c25\">https://www.jianshu.com/p/935b4c5e4c25</a>\nhdfs下载:<a href=\"https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.8.5/hadoop-2.8.5.tar.gz\">https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.8.5/hadoop-2.8.5.tar.gz</a>\n安装好hdfs后，修改common.properties配置：</p>\n<pre><code>res.upload.startup.type=HDFS\n</code></pre>\n<p>修改hadoop.properties：</p>\n<pre><code>fs.defaultFS=hdfs://localhost:9000\n</code></pre>\n<p>然后重启ApiApplicationServer即可。</p>\n<p>*<code>注意</code>：上传的文件大小，超过1M下，需要添加nginx参数</p>\n<pre><code>client_max_body_size    100m;\n</code></pre>\n",
  "link": "/zh-cn/docs/development/development-environment-setup.html",
  "meta": {}
}